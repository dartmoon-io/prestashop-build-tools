#!/usr/bin/env php
<?php

/*
 * This file is part of the dartmoon/prestashop-build-tools package.
 *
 * Copyright (c) 2021 Dartmoon <hello@dartmoon.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

use Symfony\Component\Finder\Finder;

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

$workingDir = getcwd();
$vendorDir = $workingDir . '/vendor';
$vendorPrefixedDir = $workingDir . '/vendor_prefixed';
$buildDir = $workingDir . '/build';
$rootComposerJson = json_decode(file_get_contents($workingDir . '/composer.json'), true);
$moduleName = $rootComposerJson['extra']['prestashop-module']['name'];
$artifactName = $moduleName . '.' . 'zip';
$excludeFile = __DIR__ . '/../excludes.txt';
$indexFile = __DIR__ . '/../index.php';

// Check whether the user overrided the excluded.txt file
if (file_exists($workingDir . '/' . 'excludes.txt')) {
    $excludeFile = $workingDir . '/' . 'excludes.txt';
}

// Check whether the user overrided the index.php file
if (file_exists($workingDir . '/' . 'index.php')) {
    $indexFile = $workingDir . '/' . 'index.php';
}

// Let's make a clean install without dev packages (--no-dev)
// There is a composer script that will automatically prefix the vendors
// TODO: Do not trust that a composer script has been set up
shell_exec("rm -rf {$vendorDir} {$vendorPrefixedDir}");
shell_exec("composer install --working-dir={$workingDir} --no-dev --no-autoloader -n --quiet");

// Let's remove prefixed vendors from the vendor directory
// and copy back the prefixed one
$vendors = glob($vendorPrefixedDir . '/*', GLOB_ONLYDIR);
foreach ($vendors as $vendor) {
    $vendorName = basename($vendor); // Get the vendor name from the directory name
    
    $packages = glob($vendorPrefixedDir . '/' . $vendorName . '/*', GLOB_ONLYDIR);
    foreach ($packages as $package) {
        $packageName = basename($package);
        $dstPath = $vendorDir . '/' . $vendorName . '/' . $packageName;
        $srcPath = $vendorPrefixedDir . '/' . $vendorName . '/' . $packageName;

        // We don't need to remove the old package (non-prefixed one)
        // becase the prefixing process has already taken care of it 
        shell_exec("cp -R {$srcPath} {$dstPath}");
    }
}

// Let's clean the autogenerated files by composer
// and dump the autoloader with the --classmap-authoritative option
shell_exec("rm {$vendorDir}/autoload.php");
shell_exec("rm -rf {$vendorDir}/composer");
shell_exec("composer dump-autoload --working-dir={$workingDir} --classmap-authoritative --quiet");

// Now we can build the module.
// We need to prepare the build directory and prune old builds
if (file_exists($buildDir . '/' . $moduleName)) {
    shell_exec("rm -rf {$buildDir}/{$moduleName}");
}
if (file_exists($buildDir . '/' . $artifactName)) {
    shell_exec("rm {$buildDir}/{$artifactName}");
}
shell_exec("mkdir -p {$buildDir}/{$moduleName}");

// Let's build the module
shell_exec("rsync -a --exclude-from={$excludeFile} --prune-empty-dirs {$workingDir}/ {$buildDir}/{$moduleName}/ --quiet");

// Before creating the zip file we need to add all index.php files
// into all directories
$finder = new Finder();
$finder
    ->directories()
    ->in($buildDir . '/' . $moduleName);

foreach ($finder as $file) {
    $newfile = $file->getRealPath() . '/index.php';
    if (!file_exists($newfile)) {
        copy($indexFile, $newfile);
    }
}

// Then we can finally build the module
shell_exec("cd {$buildDir}; zip -r {$artifactName} {$moduleName}/ --quiet");