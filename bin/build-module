#!/usr/bin/env php
<?php

/*
 * This file is part of the dartmoon/prestashop-build-tools package.
 *
 * Copyright (c) 2017 Dartmoon <hello@dartmoon.io>,
 *                    Alessandro Pasqualini <alessandro@dartmoon.io>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

$workingDir = getcwd();
$configDir = $workingDir . '/build-tools';
$phpScoperConfigDir = $configDir . '/php-scoper';
$vendorDir = $workingDir . '/vendor';
$vendorPrefixedDir = $workingDir . '/vendor_prefixed';
$buildDir = $workingDir . '/build';

// Retrieve the build configuration file
$config = include($configDir . '/config.php');

// Name of the module
$moduleName = $config['name'];
$artifactName = $moduleName . '.' . 'zip';

// Let's make a clean install without dev packages (--no-dev)
// There is a composer script that will automatically prefix the vendors
// TODO: Do not trust that a composer script has been set up
shell_exec("rm -rf {$vendorDir} {$vendorPrefixedDir}");
shell_exec("composer install --working-dir={$workingDir} --no-dev --no-autoloader -n --quiet");

// Let's remove prefixed vendors from the vendor directory
// and copy back the prefixed one
$vendors = glob("{$phpScoperConfigDir}/*", GLOB_ONLYDIR);
foreach ($vendors as $vendor) {
    $vendorName = basename($vendor); // Get the vendor name from the directory name
    
    // Let's prefix each package
    $packages = glob("{$vendor}/*.inc.php");
    foreach ($packages as $package) {
        $packageName = basename($package, '.inc.php');
        $dstPath = $vendorDir . '/' . $vendorName . '/' . $packageName;
        $srcPath = $vendorPrefixedDir . '/' . $vendorName . '/' . $packageName;

        // We need to overwrite the package only if it exists
        if (file_exists($dstPath)) {
            shell_exec("rm -rf {$dstPath}");
            shell_exec("cp -R {$srcPath} {$dstPath}");
        }
    }
}

// Let's clean the autogenerated files by composer
// and dump the autoloader with the --classmap-authoritative option
shell_exec("rm {$vendorDir}/autoload.php");
shell_exec("rm -rf {$vendorDir}/composer");
shell_exec("composer dump-autoload --working-dir={$workingDir} --classmap-authoritative --quiet");

// Now we can build the module.
// We need to prepare the build directory and prune old builds
if (file_exists($buildDir . '/' . $moduleName)) {
    shell_exec("rm -rf {$buildDir}/{$moduleName}");
}
if (file_exists($buildDir . '/' . $artifactName)) {
    shell_exec("rm {$buildDir}/{$artifactName}");
}
shell_exec("mkdir -p {$buildDir}/{$moduleName}");

// Retrieve the exclude file
$excludeFile = __DIR__ . '/../excludes.txt';
if (file_exists($configDir . '/' . 'excludes.txt')) {
    $excludeFile = $configDir . '/' . 'excludes.txt';
}

// Let's build the module
shell_exec("rsync -a --exclude-from={$excludeFile} --prune-empty-dirs {$workingDir}/ {$buildDir}/{$moduleName}/ --quiet");
shell_exec("cd {$buildDir}; zip -r {$artifactName} {$moduleName}/ --quiet");